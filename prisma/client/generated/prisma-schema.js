module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateVisitForm {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createVisitForm(data: VisitFormCreateInput!): VisitForm!
  updateVisitForm(data: VisitFormUpdateInput!, where: VisitFormWhereUniqueInput!): VisitForm
  updateManyVisitForms(data: VisitFormUpdateManyMutationInput!, where: VisitFormWhereInput): BatchPayload!
  upsertVisitForm(where: VisitFormWhereUniqueInput!, create: VisitFormCreateInput!, update: VisitFormUpdateInput!): VisitForm!
  deleteVisitForm(where: VisitFormWhereUniqueInput!): VisitForm
  deleteManyVisitForms(where: VisitFormWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  visitForm(where: VisitFormWhereUniqueInput!): VisitForm
  visitForms(where: VisitFormWhereInput, orderBy: VisitFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VisitForm]!
  visitFormsConnection(where: VisitFormWhereInput, orderBy: VisitFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VisitFormConnection!
  node(id: ID!): Node
}

type Subscription {
  visitForm(where: VisitFormSubscriptionWhereInput): VisitFormSubscriptionPayload
}

type VisitForm {
  id: ID!
  clientName: String!
  visitDatetime: DateTime!
  outcomeIndex: Int!
  ableToMakeDecisions: Boolean!
  careDecisions: Boolean!
}

type VisitFormConnection {
  pageInfo: PageInfo!
  edges: [VisitFormEdge]!
  aggregate: AggregateVisitForm!
}

input VisitFormCreateInput {
  id: ID
  clientName: String!
  visitDatetime: DateTime!
  outcomeIndex: Int!
  ableToMakeDecisions: Boolean
  careDecisions: Boolean
}

type VisitFormEdge {
  node: VisitForm!
  cursor: String!
}

enum VisitFormOrderByInput {
  id_ASC
  id_DESC
  clientName_ASC
  clientName_DESC
  visitDatetime_ASC
  visitDatetime_DESC
  outcomeIndex_ASC
  outcomeIndex_DESC
  ableToMakeDecisions_ASC
  ableToMakeDecisions_DESC
  careDecisions_ASC
  careDecisions_DESC
}

type VisitFormPreviousValues {
  id: ID!
  clientName: String!
  visitDatetime: DateTime!
  outcomeIndex: Int!
  ableToMakeDecisions: Boolean!
  careDecisions: Boolean!
}

type VisitFormSubscriptionPayload {
  mutation: MutationType!
  node: VisitForm
  updatedFields: [String!]
  previousValues: VisitFormPreviousValues
}

input VisitFormSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VisitFormWhereInput
  AND: [VisitFormSubscriptionWhereInput!]
}

input VisitFormUpdateInput {
  clientName: String
  visitDatetime: DateTime
  outcomeIndex: Int
  ableToMakeDecisions: Boolean
  careDecisions: Boolean
}

input VisitFormUpdateManyMutationInput {
  clientName: String
  visitDatetime: DateTime
  outcomeIndex: Int
  ableToMakeDecisions: Boolean
  careDecisions: Boolean
}

input VisitFormWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  clientName: String
  clientName_not: String
  clientName_in: [String!]
  clientName_not_in: [String!]
  clientName_lt: String
  clientName_lte: String
  clientName_gt: String
  clientName_gte: String
  clientName_contains: String
  clientName_not_contains: String
  clientName_starts_with: String
  clientName_not_starts_with: String
  clientName_ends_with: String
  clientName_not_ends_with: String
  visitDatetime: DateTime
  visitDatetime_not: DateTime
  visitDatetime_in: [DateTime!]
  visitDatetime_not_in: [DateTime!]
  visitDatetime_lt: DateTime
  visitDatetime_lte: DateTime
  visitDatetime_gt: DateTime
  visitDatetime_gte: DateTime
  outcomeIndex: Int
  outcomeIndex_not: Int
  outcomeIndex_in: [Int!]
  outcomeIndex_not_in: [Int!]
  outcomeIndex_lt: Int
  outcomeIndex_lte: Int
  outcomeIndex_gt: Int
  outcomeIndex_gte: Int
  ableToMakeDecisions: Boolean
  ableToMakeDecisions_not: Boolean
  careDecisions: Boolean
  careDecisions_not: Boolean
  AND: [VisitFormWhereInput!]
}

input VisitFormWhereUniqueInput {
  id: ID
}
`
      }
    