// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  visitForm: (where?: VisitFormWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  visitForm: (where: VisitFormWhereUniqueInput) => VisitFormNullablePromise;
  visitForms: (args?: {
    where?: VisitFormWhereInput;
    orderBy?: VisitFormOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<VisitForm>;
  visitFormsConnection: (args?: {
    where?: VisitFormWhereInput;
    orderBy?: VisitFormOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VisitFormConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createVisitForm: (data: VisitFormCreateInput) => VisitFormPromise;
  updateVisitForm: (args: {
    data: VisitFormUpdateInput;
    where: VisitFormWhereUniqueInput;
  }) => VisitFormPromise;
  updateManyVisitForms: (args: {
    data: VisitFormUpdateManyMutationInput;
    where?: VisitFormWhereInput;
  }) => BatchPayloadPromise;
  upsertVisitForm: (args: {
    where: VisitFormWhereUniqueInput;
    create: VisitFormCreateInput;
    update: VisitFormUpdateInput;
  }) => VisitFormPromise;
  deleteVisitForm: (where: VisitFormWhereUniqueInput) => VisitFormPromise;
  deleteManyVisitForms: (where?: VisitFormWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  visitForm: (
    where?: VisitFormSubscriptionWhereInput
  ) => VisitFormSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type VisitFormOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "clientName_ASC"
  | "clientName_DESC"
  | "visitDatetime_ASC"
  | "visitDatetime_DESC"
  | "outcomeIndex_ASC"
  | "outcomeIndex_DESC"
  | "ableToMakeDecisions_ASC"
  | "ableToMakeDecisions_DESC"
  | "careDecisions_ASC"
  | "careDecisions_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type VisitFormWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VisitFormWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  clientName?: Maybe<String>;
  clientName_not?: Maybe<String>;
  clientName_in?: Maybe<String[] | String>;
  clientName_not_in?: Maybe<String[] | String>;
  clientName_lt?: Maybe<String>;
  clientName_lte?: Maybe<String>;
  clientName_gt?: Maybe<String>;
  clientName_gte?: Maybe<String>;
  clientName_contains?: Maybe<String>;
  clientName_not_contains?: Maybe<String>;
  clientName_starts_with?: Maybe<String>;
  clientName_not_starts_with?: Maybe<String>;
  clientName_ends_with?: Maybe<String>;
  clientName_not_ends_with?: Maybe<String>;
  visitDatetime?: Maybe<DateTimeInput>;
  visitDatetime_not?: Maybe<DateTimeInput>;
  visitDatetime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  visitDatetime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  visitDatetime_lt?: Maybe<DateTimeInput>;
  visitDatetime_lte?: Maybe<DateTimeInput>;
  visitDatetime_gt?: Maybe<DateTimeInput>;
  visitDatetime_gte?: Maybe<DateTimeInput>;
  outcomeIndex?: Maybe<Int>;
  outcomeIndex_not?: Maybe<Int>;
  outcomeIndex_in?: Maybe<Int[] | Int>;
  outcomeIndex_not_in?: Maybe<Int[] | Int>;
  outcomeIndex_lt?: Maybe<Int>;
  outcomeIndex_lte?: Maybe<Int>;
  outcomeIndex_gt?: Maybe<Int>;
  outcomeIndex_gte?: Maybe<Int>;
  ableToMakeDecisions?: Maybe<Boolean>;
  ableToMakeDecisions_not?: Maybe<Boolean>;
  careDecisions?: Maybe<Boolean>;
  careDecisions_not?: Maybe<Boolean>;
  AND?: Maybe<VisitFormWhereInput[] | VisitFormWhereInput>;
}

export interface VisitFormCreateInput {
  id?: Maybe<ID_Input>;
  clientName: String;
  visitDatetime: DateTimeInput;
  outcomeIndex: Int;
  ableToMakeDecisions?: Maybe<Boolean>;
  careDecisions?: Maybe<Boolean>;
}

export interface VisitFormUpdateInput {
  clientName?: Maybe<String>;
  visitDatetime?: Maybe<DateTimeInput>;
  outcomeIndex?: Maybe<Int>;
  ableToMakeDecisions?: Maybe<Boolean>;
  careDecisions?: Maybe<Boolean>;
}

export interface VisitFormUpdateManyMutationInput {
  clientName?: Maybe<String>;
  visitDatetime?: Maybe<DateTimeInput>;
  outcomeIndex?: Maybe<Int>;
  ableToMakeDecisions?: Maybe<Boolean>;
  careDecisions?: Maybe<Boolean>;
}

export interface VisitFormSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VisitFormWhereInput>;
  AND?: Maybe<
    VisitFormSubscriptionWhereInput[] | VisitFormSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VisitForm {
  id: ID_Output;
  clientName: String;
  visitDatetime: DateTimeOutput;
  outcomeIndex: Int;
  ableToMakeDecisions: Boolean;
  careDecisions: Boolean;
}

export interface VisitFormPromise extends Promise<VisitForm>, Fragmentable {
  id: () => Promise<ID_Output>;
  clientName: () => Promise<String>;
  visitDatetime: () => Promise<DateTimeOutput>;
  outcomeIndex: () => Promise<Int>;
  ableToMakeDecisions: () => Promise<Boolean>;
  careDecisions: () => Promise<Boolean>;
}

export interface VisitFormSubscription
  extends Promise<AsyncIterator<VisitForm>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientName: () => Promise<AsyncIterator<String>>;
  visitDatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  outcomeIndex: () => Promise<AsyncIterator<Int>>;
  ableToMakeDecisions: () => Promise<AsyncIterator<Boolean>>;
  careDecisions: () => Promise<AsyncIterator<Boolean>>;
}

export interface VisitFormNullablePromise
  extends Promise<VisitForm | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientName: () => Promise<String>;
  visitDatetime: () => Promise<DateTimeOutput>;
  outcomeIndex: () => Promise<Int>;
  ableToMakeDecisions: () => Promise<Boolean>;
  careDecisions: () => Promise<Boolean>;
}

export interface VisitFormConnection {
  pageInfo: PageInfo;
  edges: VisitFormEdge[];
}

export interface VisitFormConnectionPromise
  extends Promise<VisitFormConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VisitFormEdge>>() => T;
  aggregate: <T = AggregateVisitFormPromise>() => T;
}

export interface VisitFormConnectionSubscription
  extends Promise<AsyncIterator<VisitFormConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VisitFormEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVisitFormSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface VisitFormEdge {
  node: VisitForm;
  cursor: String;
}

export interface VisitFormEdgePromise
  extends Promise<VisitFormEdge>,
    Fragmentable {
  node: <T = VisitFormPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VisitFormEdgeSubscription
  extends Promise<AsyncIterator<VisitFormEdge>>,
    Fragmentable {
  node: <T = VisitFormSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVisitForm {
  count: Int;
}

export interface AggregateVisitFormPromise
  extends Promise<AggregateVisitForm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVisitFormSubscription
  extends Promise<AsyncIterator<AggregateVisitForm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VisitFormSubscriptionPayload {
  mutation: MutationType;
  node: VisitForm;
  updatedFields: String[];
  previousValues: VisitFormPreviousValues;
}

export interface VisitFormSubscriptionPayloadPromise
  extends Promise<VisitFormSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VisitFormPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VisitFormPreviousValuesPromise>() => T;
}

export interface VisitFormSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VisitFormSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VisitFormSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VisitFormPreviousValuesSubscription>() => T;
}

export interface VisitFormPreviousValues {
  id: ID_Output;
  clientName: String;
  visitDatetime: DateTimeOutput;
  outcomeIndex: Int;
  ableToMakeDecisions: Boolean;
  careDecisions: Boolean;
}

export interface VisitFormPreviousValuesPromise
  extends Promise<VisitFormPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  clientName: () => Promise<String>;
  visitDatetime: () => Promise<DateTimeOutput>;
  outcomeIndex: () => Promise<Int>;
  ableToMakeDecisions: () => Promise<Boolean>;
  careDecisions: () => Promise<Boolean>;
}

export interface VisitFormPreviousValuesSubscription
  extends Promise<AsyncIterator<VisitFormPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  clientName: () => Promise<AsyncIterator<String>>;
  visitDatetime: () => Promise<AsyncIterator<DateTimeOutput>>;
  outcomeIndex: () => Promise<AsyncIterator<Int>>;
  ableToMakeDecisions: () => Promise<AsyncIterator<Boolean>>;
  careDecisions: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "VisitForm",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
